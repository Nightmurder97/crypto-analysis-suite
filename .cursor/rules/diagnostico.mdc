
# DIAGNÓSTICO

## REGLA: INVESTIGACIÓN PREVIA

- SIEMPRE investigar exhaustivamente archivos relevantes antes de codificar
- SIEMPRE identificar causa raíz técnica, no solo síntoma superficial
- CONSIDERAR contexto de librerías externas y sus limitaciones
- Solicitar capturas de pantalla/logs para errores de UI/runtime

## PROCESO DIAGNÓSTICO

- ANTES DE CODIFICAR: investigar componentes afectados, utilidades, configuración
- Revisar package.json, vite.config.ts, tsconfig.json cuando sea relevante
- Pedir síntomas observables precisos al usuario
- Analizar logs de consola del navegador para errores de runtime

## DEBUGGING EVOLUTIVO: REACTIVO → PROACTIVO

### ESTRATEGIAS AVANZADAS
- **Aislamiento Problemas**: Simplificar componente principal cuando runtime error
- **Manejo Defensivo**: Validaciones robustas, casos límite (null, 0, NaN, Infinity)
- **Escalamiento Preventivo**: Convertir incidentes en reglas permanentes
- **Documentación Integral**: Solo problemas complejos en DOCUMENTACION_TECNICA.md

### RED FLAGS DETECCIÓN TEMPRANA
- **macOS**: Apps en Downloads → cuarentena automática
- **UI/UX**: Crash/pantalla blanco → Runtime/TypeScript error
- **Tablas**: Desalineación con virtualización → Problema arquitectural
- **Colores**: Gradientes imperceptibles → Escalas fijas problemáticas
- **Seguridad**: Exposición claves → BitGuardian, escalamiento crítico

### PROTOCOLO PROACTIVO
1. Identificar patrón Si X→Y aplicable
2. Aplicar solución conocida documentada
3. Si problema nuevo → documentar patrón para futuros casos
4. Actualizar memorias/reglas para prevención automática
