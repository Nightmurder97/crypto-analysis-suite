
# DESARROLLO REACT/TYPESCRIPT

## REGLA: CÓDIGO DEFENSIVO

- Para proyectos React/TypeScript: Manejo defensivo de código con validaciones robustas
- Para errores de runtime: Simplificación temporal del componente principal para aislar problema
- Para refactorización: Asegurar que TODOS los componentes que consumen la lógica sean actualizados
- Optimizar rendimiento considerando recursos (reducir llamadas API, optimizar prompts IA)

## VALIDACIONES

- Incluir validaciones robustas y manejo de casos límite (null, 0, NaN, Infinity)
- Manejo de errores en funciones críticas, especialmente cálculos matemáticos
- Verificar tipos TypeScript estrictos

## PATRONES UI/UX ESPECÍFICOS

### TABLAS VIRTUALIZADAS
- Si desalineación header/body → Refactorizar a div+Flexbox/Grid
- NUNCA usar <table> nativa con react-virtual
- Sincronización header/body es problemática con virtualización

### ESCALAS COLORES DATOS DESIGUALES
- Para distribuciones extremas (volumen): usar percentiles P5-P95 + escala logarítmica
- Para datos agrupados: cuantización con niveles discretos, NO gradientes continuos
- Evitar escalas fijas (-10% a +10%) que "aplastan" valores pequeños

### RED FLAGS UI/UX
- Si crash/pantalla blanco → Runtime error, simplificar componente principal
- Si gradientes imperceptibles → Usar percentiles dinámicos
- Si tabla desalineada con virtualización → Cambiar a div structure

## ARQUITECTURA RECOMENDADA

- Stack: React+TypeScript+Vite+TailwindCSS+React Query
- Memoización para cálculos complejos (useMemo)
- Debouncing para inputs usuario
- Caché automático con React Query
