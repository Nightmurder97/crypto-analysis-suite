# üéØ CURSOR RULES - SISTEMA UNIVERSAL MULTI-IA
# Reglas para proyectos con gesti√≥n colaborativa entre IAs

## üìÅ ESTRUCTURA DE PROYECTO
- SIEMPRE mantener estructura docs/ con subdirectorios: system/, planning/, technical/, backup/, templates/
- OBLIGATORIO: docs/system/PLAN_INTEGRADO_MAESTRO.md con matriz de tareas priorizadas
- OBLIGATORIO: docs/system/DOCUMENTACION_TECNICA.md para problemas complejos √∫nicamente
- OBLIGATORIO: docs/system/ESTADO_PROYECTO.md para dashboard de progreso
- OBLIGATORIO: README.md principal + docs/README.md como √≠ndice

## üîÑ FLUJO DE TRABAJO
- SIEMPRE leer docs/system/PLAN_INTEGRADO_MAESTRO.md antes de cualquier tarea
- SIEMPRE actualizar estado en 3 documentos al cambiar tarea: plan maestro, estado proyecto, documentaci√≥n t√©cnica (solo si complejo)
- NUNCA comenzar tarea sin revisar dependencias
- NUNCA saltarse criterios de aceptaci√≥n definidos

## üìù DOCUMENTACI√ìN
- Documentar √öNICAMENTE problemas complejos, apartados importantes, y grandes problemas que cuestan resolver
- NO documentar pasos menores, acciones obvias, o peque√±os chequeos rutinarios
- Usar formato cronol√≥gico: Problema/Causa Ra√≠z/Soluci√≥n/Herramientas/Criterios/Estado
- Mantener enlaces cruzados entre documentos relacionados

## üéØ FORMATO DE COMUNICACI√ìN
- Usar formato est√°ndar: TAREA: [ID] - [Descripci√≥n] | ESTADO: [üî¥ PENDIENTE | üü° EN PROGRESO | ‚úÖ COMPLETADO | ‚ùå BLOQUEADO] | COMPONENTE: [Archivo] | NOTAS: [Solo cr√≠ticas]
- Minimizar comunicaci√≥n en chat - Todo se documenta en archivos .md
- Preferir documentaci√≥n en archivos sobre explicaciones en chat

## üîß CRITERIOS DE CALIDAD
- Implementaciones robustas sobre parches r√°pidos
- Validaci√≥n visual cuando sea posible
- Commits peque√±os y frecuentes con formato: [TASK-ID] Descripci√≥n del cambio
- Compatibilidad multi-IA con contexto compartido

## üö® SEGURIDAD
- Secretos (claves API, credenciales) SIEMPRE mediante variables de entorno
- Archivos .env SIEMPRE en .gitignore
- Commits frecuentes y peque√±os
- Sincronizaci√≥n regular con rama remota

## üìä PROTOCOLO DE ACTUALIZACI√ìN
1. Cambio de estado ‚Üí actualizar tabla en plan maestro
2. Si problema complejo ‚Üí documentar en DOCUMENTACION_TECNICA.md
3. Actualizar contadores en ESTADO_PROYECTO.md
4. Commit con formato: [TASK-ID] Descripci√≥n del cambio

## üé® DESARROLLO
- Para proyectos React/TypeScript: Manejo defensivo de c√≥digo con validaciones robustas
- Para errores de runtime: Simplificaci√≥n temporal del componente principal para aislar problema
- Para refactorizaci√≥n: Asegurar que TODOS los componentes que consumen la l√≥gica sean actualizados
- Optimizar rendimiento considerando recursos (reducir llamadas API, optimizar prompts IA)

## üîç DIAGN√ìSTICO
- SIEMPRE investigar exhaustivamente archivos relevantes antes de codificar
- SIEMPRE identificar causa ra√≠z t√©cnica, no solo s√≠ntoma superficial
- CONSIDERAR contexto de librer√≠as externas y sus limitaciones
- Solicitar capturas de pantalla/logs para errores de UI/runtime

## üåê COMUNICACI√ìN
- Always respond in spanish
- Documentar problemas en docs/system/DOCUMENTACION_TECNICA.md
- Usar README.md para informaci√≥n principal del proyecto
- Mantener docs/README.md como √≠ndice completo de documentaci√≥n 