Here's a comprehensive README for the IRS Protocol, drawing on the information from the provided sources and our conversation history:

---

# IRS Protocol: Index, Review, and Solve

The IRS Protocol (Index, Review, Solve) is a structured, systematic framework designed for the comprehensive analysis, refinement, and implementation of software projects. This protocol ensures a meticulous, checkpoint-driven approach, fostering clarity, reducing errors, and facilitating efficient development cycles, especially when leveraging advanced AI capabilities for project management and execution.

This document outlines the core philosophy, phases, and benefits of the IRS Protocol, drawing insights from the "Crypto Analysis Suite" project analysis.

## Core Philosophy

The IRS Protocol operates on a principle of staged, verifiable progress. It emphasizes:
*   **Systematic Progression:** Moving through distinct phases (Index, Review, Solve) in a logical sequence.
*   **Checkpoint-Driven Development:** Each significant step concludes with a checkpoint, requiring verification and explicit approval before proceeding.
*   **Collaborative AI Roles:** When applied in AI-assisted environments, the protocol defines explicit "Reviewer" (PLAN mode) and "Executor" (ACT mode) roles to ensure thoroughness and controlled implementation.
*   **Leveraging Automation:** Integration with environment-specific "Rules" and "Workflows" to automate checks and sequences of actions, enhancing efficiency and consistency.

## Protocol Phases

The IRS Protocol is divided into three distinct phases: Index, Review, and Solve.

### Phase 1: Index (I)

This initial phase focuses on gaining a foundational understanding of the project's architecture, its constituent files, and their individual functions. The primary objective is to quickly map out the entire codebase, identifying critical components and their interdependencies.

*   **Objective:** To gain a comprehensive understanding of the project's structure, dependencies, and the purpose of each file within the codebase.
*   **Actions:**
    *   **File Listing:** Recursively list all files within the project directory to obtain a complete overview.
    *   **File Reading:** Systematically read the content of each identified file. Priority is given to core configuration and application entry points to quickly grasp the project's essence. For instance, files like `package.json` (for dependencies and scripts), `vite.config.ts` (for build configuration and API proxies), `README.md` (for project overview and execution instructions), and core frontend (`index.html`, `src/index.tsx`, `src/App.tsx`) and backend (`server/index.js`) files are prioritized.
    *   **Markdown Index Creation:** Compile the gathered information into a markdown-formatted index. This document briefly describes each file and its inferred function, creating an artifact like `project_index.md`.
*   **Output:** A detailed markdown document (`project_index.md`) providing a comprehensive overview of the project's file structure and the purpose of its various components. This document serves as a foundational reference for all subsequent phases.
*   **Example from Crypto Analysis Suite:** The `project_index.md` for the Crypto Analysis Suite detailed the organization into `public/` (static assets), `server/` (Node.js Express server for API proxying), and `src/` (main source code containing `components/`, `services/`, and `utils/`). It highlighted specific files like `public/crypto_coins_category.csv` for data categories, `src/services/geminiService.ts` for Google Gemini API interaction, `src/utils/apiClient.ts` for CoinGecko data fetching, and `src/utils/csvCategoriesService.ts` for CSV parsing and data enrichment.

### Phase 2: Review (R)

This phase moves beyond structural understanding to a deep inspection of the codebase. The objective is to identify specific code-level issues, potential bugs, security vulnerabilities, and areas for optimization, as well as to clarify the intended usage of any external tools.

*   **Objective:** To conduct a thorough code inspection, identify potential bugs, security vulnerabilities, and areas for improvement, and to gain clarity on specific requirements for leveraging any external "MCP tools".
*   **Actions:**
    *   **Detailed Code Examination:** Systematically review critical files and functionalities for issues:
        *   **`src/services/geminiService.ts`**: Focus on the `generateAnalysisFromPrompt` placeholder function, which appears to return static text and needs full implementation or removal. Also, scrutinize the logic for handling API keys and potential prompt injection risks.
        *   **`server/index.js`**: Clarify its purpose and assess its redundancy with the frontend's direct Gemini API calls, determining if it needs to be run separately.
        *   **`src/utils/csvCategoriesService.ts`**: Ensure the CSV parsing and category mapping logic is robust, covering all expected categories and checking for potential edge cases in matching. (It was noted that `src/utils/csvParser.ts` was not found or was empty, but the parsing logic resides within `csvCategoriesService.ts`, suggesting it may not be an issue).
        *   **`src/App.tsx` and `src/components/CryptoTable.tsx`**: Inspect for performance bottlenecks, especially when handling large datasets, and review the sorting/filtering logic.
        *   **`vite.config.ts`**: Verify proxy configurations and environment variable handling.
        *   **`package.json`**: Review for potentially outdated dependencies or security vulnerabilities.
        *   **Hardcoded Secrets**: Actively look for any hardcoded secrets or sensitive information.
        *   **Error Handling**: Assess the robustness and comprehensiveness of error handling mechanisms across the entire application.
    *   **Vulnerability Assessment**:
        *   **API Key Management**: Verify that sensitive information like `GEMINI_API_KEY` is correctly handled via environment variables (`.env`). It is crucial that the `.env` file is never committed to version control to prevent exposure of API keys.
        *   **Prompt Injection**: While prompts are currently constructed internally, evaluate the risk of prompt injection if user input were to be directly incorporated into prompt generation without proper sanitization.
        *   **CORS**: Note potential Cross-Origin Resource Sharing (CORS) issues (e.g., with CoinGecko API) as mentioned in `README.md`. Verify that mitigation strategies, such as Vite's proxy configuration and the server's `cors()` middleware, are effective.
    *   **Propose Solutions:** Formulate specific, actionable solutions for all identified bugs, vulnerabilities, and areas for improvement.
    *   **MCP Tool Usage Clarification:** Engage with the user to understand specific requirements for "MCP tools" (e.g., `context7`), detailing which tools they want to leverage and for what specific tasks (e.g., data analysis, automation, integration).
*   **Output:** A "Prioritized Action Plan" document (either standalone as `action_plan.md` or integrated into `full_project_plan.md`) that details the findings from the code inspection and outlines the proposed actions for resolution.

### Phase 3: Solve (S)

This is the implementation phase, where the planned improvements are executed, and the application's functionality is thoroughly verified. A key feature of this phase in an AI-assisted environment is the structured collaboration between two distinct AI roles: the "Reviewer" (operating in PLAN mode) and the "Executor" (operating in ACT mode).

*   **Objective:** To systematically implement the planned improvements, including bug fixes, code refactoring for clarity and performance, integration of specified external tools, and comprehensive verification of the application's functionality and stability.
*   **Workflow: Two-AI Model Interaction:** This phase is executed as a series of steps, with the Executor AI performing the tasks and presenting results to the Reviewer AI for approval at critical checkpoints. The Executor cannot proceed without the Reviewer's explicit approval.
    *   **Reviewer (PLAN Mode) Responsibilities:**
        *   **Define Tasks:** Provide clear and detailed instructions for each step's actions.
        *   **Review Outputs:** Thoroughly examine summaries, code diffs, linting results, integration confirmations, and test outcomes presented by the Executor.
        *   **Grant Approval:** Explicitly state "Approved: Proceed to Step X" to allow the Executor to advance.
    *   **Executor (ACT Mode) Responsibilities:**
        *   **Execute Actions:** Perform the specific tasks defined by the Reviewer.
        *   **Present for Approval:** Provide concise summaries, relevant code changes (diffs), test results (e.g., screenshots, console logs), and confirmations of task completion at each checkpoint.
    *   **Checkpoints:** Mandatory points within the workflow where the Executor must pause, present results, and receive explicit Reviewer approval. Examples include:
        *   **Checkpoint 1.1: Environment Ready & Initial Review Complete:** Condition: Dependencies installed, `.env` created, key files summarized.
        *   **Checkpoint 2.1: Code Inspection & Fixes Complete:** Condition: Bugs fixed, code refactored, security addressed, error handling improved, linting passes.
        *   **Checkpoint 3.1: MCP Tools Integrated:** Condition: Tools integrated and verified.
        *   **Checkpoint 4.1: Application Verified:** Condition: Application runs without errors, all core features function correctly, no critical bugs/regressions.
*   **Key Steps and Actions (Executor Perspective):**
    *   **Step 1: Setup and Initial Analysis:** Install project dependencies (`npm install`). Create and configure a `.env` file with the `GEMINI_API_KEY`. Read and summarize key project files.
    *   **Step 2: Detailed Code Inspection and Bug Fixing:** Implement the placeholder `generateAnalysisFromPrompt` function in `geminiService.ts` with actual logic. Review and refactor `server/index.js` as guided by the Reviewer. Enhance CSV parsing and category mapping in `csvCategoriesService.ts` if necessary. Optimize performance in `CryptoTable.tsx` and `App.tsx`. Address any identified security concerns (e.g., API key exposure, prompt injection). Improve error handling. Run `npm run lint` and fix any linting errors.
    *   **Step 3: MCP Tool Integration (Conditional):** Integrate specified MCP tools based on the Reviewer's instructions.
    *   **Step 4: Application Execution and Verification:** Run the application using `npm run dev`. Test all core features, including data loading, table sorting and selection, heatmaps, AI analysis (if API key provided), and data export functionalities. Verify that the application is stable and performs as expected.
*   **Integration with "RULES and WORKFLOWS" (Flowchart Description):** The IRS Protocol encourages leveraging environment features like "Rules" and "Workflows" to automate and enforce aspects of the two-AI model interaction.
    *   **Nodes:** The flowchart would include `Start` and `End` nodes, `Reviewer (PLAN) Task` and `Executor (ACT) Task` nodes, `Checkpoint (Decision Node)` for approvals, `Rule Enforcement` nodes for automated condition checks (e.g., "Rule: Linting Passed?"), and `Workflow Trigger` nodes for automating sequences of actions (e.g., "Workflow: Run Tests").
    *   **Connections:** Arrows indicate the flow of control. From `Checkpoint` nodes, branches (e.g., "Approved" or "Not Approved") guide the Executor's next action, potentially leading to re-attempts or flagging the Reviewer.
    *   **Example Flow:** The process would typically flow from a Reviewer task to an Executor task, then through a `Rule Enforcement` check (e.g., "Check: Dependencies Installed?"). A `Checkpoint` would follow, requiring Reviewer approval. If approved, the process moves to the next Reviewer task, Executor task, and potentially a `Workflow Trigger` (e.g., "Run Linting Workflow") before another `Rule Enforcement` and `Checkpoint`. This iterative process continues until the `End` node.
*   **Output:** A fully functional and verified application. Additionally, a comprehensive project plan document (`full_project_plan.md`) consolidates the project overview, file index, analysis findings, and the detailed sequential implementation plan for the two-AI model workflow, serving as a complete record of the process.

## Benefits of the IRS Protocol

The IRS Protocol offers a robust and transparent framework for project development, ensuring:
*   **Systematic Approach:** Each phase systematically builds upon the previous one, ensuring thoroughness and reducing the likelihood of missing critical steps.
*   **Enhanced Quality:** Deep inspection for bugs, vulnerabilities, and performance issues leads to higher quality, more robust code.
*   **Clear Communication and Accountability:** Explicit roles (Reviewer/Executor) and mandatory checkpoints foster clear communication and accountability, especially in complex, collaborative AI-driven environments.
*   **Proactive Risk Mitigation:** Early identification and addressing of security concerns (e.g., API key management, prompt injection, CORS) significantly reduce potential vulnerabilities and enhance overall security posture.
*   **Increased Efficiency through Automation:** The integration with "Rules" and "Workflows" allows for the automation of routine checks and tasks, streamlining the development process and freeing up resources for more complex problem-solving.
*   **Adaptability and Control:** The protocol's structured approval points provide opportunities for human oversight and allow for flexible adjustments based on user feedback and evolving project needs (e.g., conditional MCP tool integration).

## How to Use This Protocol

To implement the IRS Protocol for a project, follow these general guidelines:

1.  **Initiate "Index" Phase:** Begin by instructing the AI to list and read all project files, then request a markdown index (`project_index.md`) summarizing their purpose and structure.
2.  **Proceed to "Review" Phase:** Once the indexing is complete, instruct the AI to conduct a detailed code inspection for bugs, improvements, and vulnerabilities. This is the stage to clarify any specific "MCP tools" you wish to leverage and their intended purpose.
3.  **Transition to "Solve" Phase:** After reviewing and approving the AI's "Prioritized Action Plan," explicitly instruct the AI to switch to ACT MODE. During this phase, closely monitor the defined checkpoints, reviewing the Executor AI's progress and providing explicit approvals to allow it to proceed to subsequent steps.

By adhering to the IRS Protocol, projects can achieve a higher degree of organization, quality assurance, and efficient execution, making it an invaluable framework for strategic software development.

---